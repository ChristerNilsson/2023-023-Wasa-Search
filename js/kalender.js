// Generated by CoffeeScript 2.5.1
  // TODO

// Hamburgare
  //		Nyheter
  //		Rating
  //		Kontakt
  //			Senior
  //			Junior
  //			Styrelse
  //		Sök
  // Lag/Individ ?
var Button, D, Day, J, K, Kalender, N, S, T, Z, addDays, age, ageClick, attributes, c, content, data, daysInMonth, filterData, geo, geoClick, getWeek, kalender, logo, month, monthClick, pretty, r, released, resetClick, resize, twoDigits,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  r4r,
  div,
  a,
  span,
  log,
  range
} from '../js/utils.js';

r = (i) => {
  return Math.floor(i / 7);
};

c = (i) => {
  return i % 7;
};

Z = 50;

kalender = null;

data = {};

logo = null;

released = true;

J = 'lightblue';

S = 'yellow';

T = 'pink';

K = 'red';

D = 'green';

N = 'blue';

month = (new Date()).toISOString().slice(0, 10); // yyyy-mm eller yyyy-mm-dd

age = ""; // Senior Junior Tjej

geo = ""; // Klubb Distrikt Nation

twoDigits = (n) => {
  return ("0" + n).slice(-2);
};

getWeek = (yyyymmdd) => { // https://weeknumber.com/how-to/javascript
  var date, week1;
  date = new Date(yyyymmdd);
  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
  week1 = new Date(date.getFullYear(), 0, 4);
  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
};

console.assert(19 === getWeek("2023-05-10"));

console.assert(52 === getWeek("2023-01-01"));

console.assert(52 === getWeek("2022-01-01"));

console.assert(53 === getWeek("2021-01-01"));

console.assert(1 === getWeek("2019-12-31"));

resetClick = () => {
  month = (new Date()).toISOString().slice(0, 10);
  age = "";
  geo = "";
  kalender.filtrera();
  return content(month);
};

daysInMonth = (month) => {
  return new Date(month.slice(0, 4), month.slice(5, 7), 0).getDate();
};

console.assert(31 === daysInMonth("2021-01"));

console.assert(28 === daysInMonth("2021-02"));

console.assert(31 === daysInMonth("2021-03-12"));

console.assert(31 === daysInMonth("2021-03"));

monthClick = (delta) => {
  var mm, yyyy;
  [yyyy, mm] = month.slice(0, 7).split('-');
  yyyy = parseInt(yyyy);
  mm = parseInt(mm);
  if (mm === 12 && delta === 1) {
    yyyy++;
    mm = 1;
  } else if (mm === 1 && delta === -1) {
    yyyy--;
    mm = 12;
  } else {
    mm += delta;
    if (mm < 10) {
      mm = '0' + mm;
    }
  }
  month = yyyy + "-" + mm;
  return kalender.filtrera();
};

pretty = (month) => {
  var dd, mm, yyyy;
  [yyyy, mm, dd] = month.split('-');
  mm = parseInt(mm);
  return " Januari Februari Mars April Maj Juni Juli Augusti September Oktober November December".split(' ')[mm];
};

ageClick = function(obj) {
  age = age === obj.prompt ? "" : obj.prompt;
  return kalender.filtrera();
};

geoClick = function(obj) {
  geo = geo === obj.prompt ? "" : obj.prompt;
  return kalender.filtrera();
};

Button = class Button {
  constructor(prompt, x4, y4, w1, h1, bg, click) {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.prompt = prompt;
    this.x = x4;
    this.y = y4;
    this.w = w1;
    this.h = h1;
    this.bg = bg;
    this.click = click;
  }

  draw() {
    var ref;
    if (this.image) {
      return image(this.image, this.x, this.y, this.w, this.h);
    } else {
      push();
      fill(this.bg);
      if ((ref = this.prompt) === age || ref === geo) {
        textSize(0.45 * Z);
      } else {
        textSize(0.3 * Z);
      }
      rect(this.x, this.y, this.w, this.h, 5);
      if ('red green blue'.includes(this.bg)) {
        fill('white');
      } else {
        fill('black');
      }
      text(this.prompt, this.x, this.y);
      return pop();
    }
  }

  click() {
    return console.log(this.prompt);
  }

  inside() {
    return (this.x - this.w / 2 < mouseX && mouseX < this.x + this.w / 2) && (this.y - this.h / 2 < mouseY && mouseY < this.y + this.h / 2);
  }

};

Day = class Day {
  constructor(prompt, i1, x4, y4, attributes1) {
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    this.drawAttributes = this.drawAttributes.bind(this);
    this.prompt = prompt;
    this.i = i1;
    this.x = x4;
    this.y = y4;
    this.attributes = attributes1;
  }

  click() {
    month = month.slice(0, 7) + '-' + twoDigits(this.prompt);
    this.draw();
    return content(month);
  }

  inside(index) {
    var ci, ref, ref1, ri;
    ci = c(index + kalender.offset);
    ri = r(index + kalender.offset);
    return (Z * ci - Z / 2 < (ref = mouseX - kalender.mx) && ref < Z * ci + Z / 2) && (Z * ri - Z / 2 < (ref1 = mouseY - kalender.my) && ref1 < Z * ri + Z / 2);
  }

  draw() {
    var arr;
    push();
    arr = ['white', 'black'];
    if (month.slice(7, 10) === '-' + twoDigits(this.prompt)) {
      arr.reverse();
    }
    fill(arr[0]);
    rect(this.x, this.y, Z, Z, 5);
    fill(arr[1]);
    text(this.prompt, this.x, this.y - 0.3 * Z);
    this.drawAttributes();
    return pop();
  }

  drawAttributes() {
    var antal, attr, d, i, j, len, ref, sw, x, x1, x2, x3, xy, y, y2, y3;
    d = 0.1 * Z;
    push();
    this.attributes = this.attributes.slice(0, 6);
    antal = this.attributes.length;
    x1 = round(this.x - 3 * d);
    x2 = round(this.x);
    x3 = round(this.x + 3 * d);
    y2 = round(this.y);
    y3 = round(this.y + 3 * d);
    xy = [[]];
    xy.push([
      [
        x2,
        y2 // one
      ]
    ]);
    xy.push([
      [x1,
      y2],
      [
        x3,
        y2 // two
      ]
    ]);
    xy.push([
      [x1,
      y2],
      [x2,
      y2],
      [
        x3,
        y2 // three
      ]
    ]);
    xy.push([
      [x1,
      y2],
      [x2,
      y2],
      [x3,
      y2],
      [
        x2,
        y3 // four
      ]
    ]);
    xy.push([
      [x1,
      y2],
      [x2,
      y2],
      [x3,
      y2],
      [x1,
      y3],
      [
        x3,
        y3 // five
      ]
    ]);
    xy.push([
      [x1,
      y2],
      [x2,
      y2],
      [x3,
      y2],
      [x1,
      y3],
      [x2,
      y3],
      [
        x3,
        y3 // six
      ]
    ]);
    d = 0.2 * Z;
    sw = 0.05 * Z;
    strokeWeight(sw);
    ref = this.attributes;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      attr = ref[i];
      fill({J, S, T}[attr[0]]);
      stroke({K, D, N}[attr[1]]);
      [x, y] = xy[antal][i];
      circle(x, y, d);
    }
    return pop();
  }

};

filterData = (items, month, attr) => {
  return _.filter(items, (item) => {
    return item.d.includes(month.slice(0, 7)) && item.a.includes(attr);
  });
};

attributes = (items, date) => {
  var res;
  res = _.filter(items, (item) => {
    return item.d.includes(date) && (age === "" || item.a[0] === age[0]) && (geo === "" || item.a[1] === geo[0]);
  });
  return _.map(res, (item) => {
    return item.a;
  });
};

addDays = (date, days) => {
  return new Date(date.getTime() + days * 24 * 60 * 60000);
};

Kalender = class Kalender {
  constructor(items1) {
    this.getOffset = this.getOffset.bind(this);
    this.filtrera = this.filtrera.bind(this);
    this.draw = this.draw.bind(this);
    this.mousePressed = this.mousePressed.bind(this);
    this.items = items1;
    this.mx = 3 * Z / 2;
    this.my = 3 * Z / 2;
    this.filtrera();
  }

  getOffset() {
    var res;
    res = new Date(month.slice(0, 7) + '-01');
    return modulo(res.getDay() - 1, 7);
  }

  filtrera() {
    var i, items, j, len, ref, results, x, y;
    items = filterData(this.items, month.slice(0, 7), "");
    this.offset = this.getOffset();
    this.days = [];
    ref = range(daysInMonth(month));
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (this.offset + i >= 0) {
        x = this.mx + Z * (modulo(this.offset + i, 7));
        y = this.my + Z * floor((this.offset + i) / 7);
        results.push(this.days.push(new Day(i + 1, i, x, y, attributes(items, month.slice(0, 7) + "-" + twoDigits(i + 1)))));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  draw() {
    var button, d, day, i, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, results, weekNo;
    fill("black");
    textSize(0.3 * Z);
    ref = range(7);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text("Mån Tis Ons Tor Fre Lör Sön".split(' ')[i], kalender.mx + Z * i, 0.25 * Z);
    }
    d = new Date(month.slice(0, 7) + '-01');
    ref1 = range(6);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      weekNo = getWeek(d);
      d = addDays(d, 7);
      text("v" + weekNo, 0.375 * Z, kalender.my + Z * i);
    }
    text(pretty(month), Z * 5.25, 7.85 * Z);
    text(month.slice(0, 4), Z * 5.25, 8.25 * Z);
    ref2 = this.days;
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      day = ref2[l];
      day.draw();
    }
    ref3 = this.buttons;
    results = [];
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      button = ref3[m];
      results.push(button.draw());
    }
    return results;
  }

  mousePressed(x, y) {
    var button, day, j, k, len, len1, ref, ref1, results;
    ref = this.days;
    for (j = 0, len = ref.length; j < len; j++) {
      day = ref[j];
      if (day.inside(day.i)) {
        day.click();
      }
    }
    ref1 = this.buttons;
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      button = ref1[k];
      if (button.inside()) {
        results.push(button.click(button));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.onresize = function() {
  return resize();
};

resize = function() {
  var day, h, j, len, ref, w, x0, x1, x2, x3, y0, y1, y2, y3;
  resizeCanvas(innerWidth, innerWidth * 1.1);
  Z = width / 7.8;
  kalender.mx = 1.25 * Z;
  kalender.my = Z;
  ref = kalender.days;
  for (j = 0, len = ref.length; j < len; j++) {
    day = ref[j];
    day.x = kalender.mx + Z * c(day.i + kalender.offset);
    day.y = kalender.my + Z * r(day.i + kalender.offset);
  }
  kalender.buttons = [];
  w = 5 * Z / 3;
  h = Z;
  x0 = 1.4 * Z;
  x1 = 2.75 * Z + 0.5 * w;
  x2 = 2.75 * Z + 1.5 * w;
  x3 = 2.75 * Z + 2.5 * w;
  y0 = 7.55 * Z;
  y1 = 6 * Z;
  y2 = 7 * Z;
  y3 = 8 * Z;
  kalender.buttons.push(new Button("Senior", x1, y1, w, h, S, ageClick));
  kalender.buttons.push(new Button("Junior", x2, y1, w, h, J, ageClick));
  kalender.buttons.push(new Button("Tjej", x3, y1, w, h, T, ageClick));
  kalender.buttons.push(new Button("Klubb", x1, y2, w, h, K, geoClick));
  kalender.buttons.push(new Button("Distrikt", x2, y2, w, h, D, geoClick));
  kalender.buttons.push(new Button("Nation", x3, y2, w, h, N, geoClick));
  kalender.buttons.push(new Button("", x0, y0, 1.2 * w, 1.2 * w, 'white', resetClick));
  _.last(kalender.buttons).image = logo;
  kalender.buttons.push(new Button("Förra", x1, y3, w, h, 'white', () => {
    return monthClick(-1);
  }));
  kalender.buttons.push(new Button("Nästa", x3, y3, w, h, 'white', () => {
    return monthClick(+1);
  }));
  return draw();
};

window.mousePressed = () => {
  if (!released) { // to make Android work 
    return;
  }
  released = false;
  kalender.mousePressed(mouseX, mouseY);
  return draw();
};

window.mouseReleased = function() { // to make Android work 
  released = true;
  return false;
};

window.preload = () => {
  data = loadJSON("kalender.json");
  return logo = loadImage("wasa.png");
};

window.setup = () => {
  var canvas;
  noLoop();
  canvas = createCanvas(425, 375);
  canvas.parent('sketch-holder');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  imageMode(CENTER);
  data = data.events;
  kalender = new Kalender(data);
  resize();
  return resetClick();
};

content = (date) => {
  var element, res;
  element = document.getElementById("app");
  element.replaceChildren();
  res = _.filter(kalender.items, (item) => {
    return item.d.includes(date) && (age === "" || item.a[0] === age[0]) && (geo === "" || item.a[1] === geo[0]);
  });
  return r4r(() => {
    var bg0, bg1, item, text0, text1;
    return div({
      class: "noselect",
      style: "margin-left:10px"
    }, date, (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = res.length; j < len; j++) {
        item = res[j];
        bg0 = {J, S, T}[item.a[0]];
        bg1 = {K, D, N}[item.a[1]];
        text0 = {
          J: "Junior",
          S: "Senior",
          T: "Tjej"
        }[item.a[0]];
        text1 = {
          K: "Klubb",
          D: "Distrikt",
          N: "Nation"
        }[item.a[1]];
        results.push(div({
          style: "margin-left:20px;"
        }, span({
          style: `margin-left:0px; background-color:${bg0};`
        }, text0), " ", span({
          style: `margin-left:0px; background-color:${bg1}; color:white`
        }, text1), " " + item.t, div({
          style: "margin-left:20px"
        }, item.i ? [
          " • ",
          a({
            href: item.i,
            target: "_blank"
          },
          "Inbjudan")
        ] : void 0, item.r ? [
          " • ",
          a({
            href: item.r,
            target: "_blank"
          },
          "Resultat")
        ] : void 0)));
      }
      return results;
    })());
  });
};

window.draw = function() {
  background('lightgray');
  return kalender.draw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-023-Wasa-Search\coffee\kalender.coffee