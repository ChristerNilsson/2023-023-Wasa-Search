// Generated by CoffeeScript 2.5.1
var Day, Kalender, MONTHS, N, S, attributes, c, data, daysInMonth, filterData, kalender, r, resize,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  log,
  range
} from '../js/utils.js';

N = 7;

MONTHS = "jan feb mar apr maj jun jul aug sep okt nov dec".split(' ');

r = (i) => {
  return Math.floor(i / N);
};

c = (i) => {
  return i % N;
};

S = 50;

kalender = null;

data = {};

daysInMonth = (year, month) => {
  return new Date(year, month, 0).getDate();
};

//daysInMonth(2020, 12)); // 31
//daysInMonth(2024, 2)); // 29
Day = class Day {
  constructor(prompt, i1, x6, y4, attributes1) {
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    this.drawAttributes = this.drawAttributes.bind(this);
    this.prompt = prompt;
    this.i = i1;
    this.x = x6;
    this.y = y4;
    this.attributes = attributes1;
  }

  click() {
    return console.log(this.prompt);
  }

  inside(index) {
    var ci, ref, ref1, ri;
    ci = c(index + kalender.offset);
    ri = r(index + kalender.offset);
    return (S * ci - S / 2 < (ref = mouseX - kalender.mx) && ref < S * ci + S / 2) && (S * ri - S / 2 < (ref1 = mouseY - kalender.my) && ref1 < S * ri + S / 2);
  }

  draw() {
    fill('white');
    rect(this.x, this.y, S, S);
    fill('black');
    textSize(0.3 * S);
    text(this.prompt, this.x, this.y - 0.25 * S);
    return this.drawAttributes();
  }

  drawAttributes() {
    var antal, attr, d, i, j, len, ref, sw, w, x, x1, x2, x3, x4, x5, xy, y, y1, y2, y3, yo;
    d = 0.1 * S;
    yo = 0.15 * S;
    push();
    strokeWeight(3);
    this.attributes = this.attributes.slice(0, 6);
    antal = this.attributes.length;
    x1 = round(this.x - 3.2 * d);
    x2 = round(this.x - 1.6 * d);
    x3 = round(this.x);
    x4 = round(this.x + 1.6 * d);
    x5 = round(this.x + 3.2 * d);
    y1 = round(this.y + yo - 1.3 * d);
    y2 = round(this.y + yo);
    y3 = round(this.y + yo + 1.3 * d);
    w = round(0.08 * S);
    xy = [[]];
    xy.push([[x3, y2]]);
    xy.push([[x2 - w, y2], [x4 + w, y2]]);
    xy.push([[x1, y2], [x3, y2], [x5, y2]]);
    xy.push([
      [x2 - w,
      y1 - w],
      [x4 + w,
      y1 - w],
      [x2 - w,
      y3],
      [
        x4 + w,
        y3 // quad
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [x3,
      y1],
      [x5,
      y1],
      [x2,
      y3],
      [
        x4,
        y3 // olympic rings
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [x3,
      y1],
      [x5,
      y1],
      [x1,
      y3],
      [x3,
      y3],
      [
        x5,
        y3 // six pack
      ]
    ]);
    d = [0, 0.4 * S, 0.3 * S, 0.25 * S, 0.3 * S, 0.2 * S, 0.2 * S][antal];
    sw = [0, 6, 4, 3, 3, 2, 2][antal];
    strokeWeight(sw);
    ref = this.attributes;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      attr = ref[i];
      fill({
        J: 'black',
        S: 'lightgray',
        F: 'pink'
      }[attr[0]]);
      stroke({
        K: 'red',
        D: 'green',
        N: 'blue'
      }[attr[1]]);
      [x, y] = xy[antal][i];
      console.log(this.i + 1, attr, x, y);
      circle(x, y, d);
    }
    return pop();
  }

};

filterData = (items, month, attr) => {
  return _.filter(items, (item) => {
    return item.d.includes(month) && item.a.includes(attr);
  });
};

attributes = (items, date) => {
  var res;
  res = _.filter(items, (item) => {
    return item.d.includes(date);
  });
  res = _.map(res, (item) => {
    return item.a;
  });
  return res.sort().reverse();
};

Kalender = class Kalender {
  constructor(items1) {
    var i, items, j, len, month, ref;
    this.draw = this.draw.bind(this);
    this.mousePressed = this.mousePressed.bind(this);
    this.items = items1;
    this.mx = 3 * S / 2;
    this.my = 3 * S / 2;
    month = '2023-04';
    this.date = new Date(month + '-01');
    this.month = this.date.getMonth();
    this.tmonth = MONTHS[this.month];
    
    // JST LAC TE KDN  C=Stockholm N=Sverige
    items = filterData(this.items, month, "");
    console.log({items});
    this.offset = modulo(this.date.getDay() - 1, 7);
    console.log('offset', this.offset);
    this.days = [];
    ref = range(daysInMonth(this.date.getFullYear(), this.date.getMonth() + 1));
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (this.offset + i >= 0) {
        this.days.push(new Day(i + 1, i, this.mx + S * c(this.offset + i), this.my + S * r(this.offset + i), attributes(items, month + "-" + ("0" + (i + 1)).slice(-2))));
      }
    }
  }

  draw() {
    var day, i, j, k, l, len, len1, len2, ref, ref1, ref2, results;
    textSize(0.3 * S);
    ref = range(N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text("må ti on to fr lö sö".split(' ')[i], kalender.mx + S * i, 0.7 * S);
    }
    textSize(0.3 * S);
    ref1 = range(6);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      text("v" + "15 16 17 18 19 20 21 22".split(' ')[i], S / 2, kalender.my + S * i);
    }
    text("< " + MONTHS[modulo(this.month - 1, 12)], S * 1.5, 0.3 * S);
    text(MONTHS[this.month], S * 4.5, 0.3 * S);
    text(MONTHS[modulo(this.month + 1, 12)] + " >", S * 7.5, 0.3 * S);
    ref2 = this.days;
    results = [];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      day = ref2[l];
      results.push(day.draw());
    }
    return results;
  }

  mousePressed(x, y) {
    var day, j, len, ref, results;
    ref = this.days;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      day = ref[j];
      if (day.inside(day.i)) {
        results.push(day.click());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.onresize = function() {
  return resize();
};

resize = function() {
  var day, j, len, ref;
  S = innerWidth / 8.5;
  kalender.mx = 3 * S / 2;
  kalender.my = 3 * S / 2;
  ref = kalender.days;
  for (j = 0, len = ref.length; j < len; j++) {
    day = ref[j];
    day.x = kalender.mx + S * c(day.i + kalender.offset);
    day.y = kalender.my + S * r(day.i + kalender.offset);
  }
  
  // H = min(innerHeight//11,innerWidth//10)
  // W = H
  // S = W
  // mx = (innerWidth - 8*S)/2
  // my = S/2
  return resizeCanvas(innerWidth, 7.5 * S);
};

window.mousePressed = () => {
  return kalender.mousePressed(mouseX, mouseY);
};

window.preload = () => {
  return data = loadJSON("kalender.json");
};

window.setup = () => {
  noLoop();
  createCanvas(425, 375);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  data = data.events;
  console.log(data);
  kalender = new Kalender(data);
  resize();
  return draw();
};

window.draw = function() {
  background('lightgray');
  return kalender.draw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-023-Wasa-Search\coffee\kalender.coffee