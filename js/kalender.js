// Generated by CoffeeScript 2.5.1
var Button, Day, Kalender, MONTHS, N, S, age, ageClick, attributes, c, data, daysInMonth, filterData, geo, geoClick, kalender, month, monthClick, pretty, r, resize,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  log,
  range
} from '../js/utils.js';

N = 7;

MONTHS = "Jan Feb Mar Apr Maj Jun Jul Aug Sep Okt Nov Dec".split(' ');

r = (i) => {
  return Math.floor(i / N);
};

c = (i) => {
  return i % N;
};

S = 50;

kalender = null;

data = {};

month = "2023-04";

age = ""; // Junior Senior Tjej

geo = ""; // Klubb Distrikt Nation

daysInMonth = (year, month) => {
  return new Date(year, month, 0).getDate();
};

monthClick = (delta) => {
  var mm, yyyy;
  [yyyy, mm] = month.split('-');
  yyyy = parseInt(yyyy);
  mm = parseInt(mm);
  if (mm === 12 && delta === 1) {
    yyyy++;
    mm = 1;
  } else if (mm === 1 && delta === -1) {
    yyyy--;
    mm = 12;
  } else {
    mm += delta;
    if (mm < 10) {
      mm = '0' + mm;
    }
  }
  month = yyyy + "-" + mm;
  kalender.filtrera();
  return console.log(month);
};

pretty = (month) => {
  var mm, yyyy;
  [yyyy, mm] = month.split('-');
  mm = parseInt(mm);
  return " Januari Februari Mars April Maj Juni Juli Augusti September Oktober November December".split(' ')[mm] + ' ' + yyyy;
};

ageClick = function(obj) {
  age = age === obj.prompt ? "" : obj.prompt;
  return kalender.filtrera();
};

geoClick = function(obj) {
  geo = geo === obj.prompt ? "" : obj.prompt;
  return kalender.filtrera();
};

Button = class Button {
  constructor(prompt, x4, y4, w1, h1, bg, click) {
    this.draw = this.draw.bind(this);
    this.click = this.click.bind(this);
    this.prompt = prompt;
    this.x = x4;
    this.y = y4;
    this.w = w1;
    this.h = h1;
    this.bg = bg;
    this.click = click;
    this.x *= width / 100;
    this.y *= height / 100;
  }

  draw() {
    var ref;
    push();
    fill(this.bg);
    if ((ref = this.prompt) === age || ref === geo) {
      strokeWeight(3);
    } else {
      strokeWeight(1);
    }
    rect(this.x, this.y, this.w, this.h);
    if (this.bg === 'blue') {
      fill('white');
    } else {
      fill('black');
    }
    textSize(0.3 * S);
    text(this.prompt, this.x, this.y);
    return pop();
  }

  click() {
    return console.log(this.prompt);
  }

  inside() {
    return (this.x - this.w / 2 < mouseX && mouseX < this.x + this.w / 2) && (this.y - this.h / 2 < mouseY && mouseY < this.y + this.h / 2);
  }

};

Day = class Day {
  constructor(prompt, i1, x4, y4, attributes1) {
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    this.drawAttributes = this.drawAttributes.bind(this);
    this.prompt = prompt;
    this.i = i1;
    this.x = x4;
    this.y = y4;
    this.attributes = attributes1;
  }

  click() {
    return console.log(this.prompt);
  }

  inside(index) {
    var ci, ref, ref1, ri;
    ci = c(index + kalender.offset);
    ri = r(index + kalender.offset);
    return (S * ci - S / 2 < (ref = mouseX - kalender.mx) && ref < S * ci + S / 2) && (S * ri - S / 2 < (ref1 = mouseY - kalender.my) && ref1 < S * ri + S / 2);
  }

  draw() {
    fill('white');
    rect(this.x, this.y, S, S);
    this.drawAttributes();
    fill('black');
    textSize(0.3 * S);
    return text(this.prompt, this.x, this.y - 0.3 * S);
  }

  drawAttributes() {
    var antal, attr, d, i, j, len, ref, sw, x, x1, x2, x3, xy, y, y1, y2, y3;
    d = 0.1 * S;
    push();
    this.attributes = this.attributes.slice(0, 6);
    antal = this.attributes.length;
    x1 = round(this.x - 3 * d);
    x2 = round(this.x);
    x3 = round(this.x + 3 * d);
    y1 = round(this.y - 3 * d);
    y2 = round(this.y);
    y3 = round(this.y + 3 * d);
    xy = [[]];
    xy.push([
      [
        x2,
        y2 // one
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [
        x3,
        y3 // two
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [x2,
      y2],
      [
        x3,
        y3 // three
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [x1,
      y3],
      [x3,
      y1],
      [
        x3,
        y3 // four
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [x1,
      y3],
      [x3,
      y1],
      [x3,
      y3],
      [
        x2,
        y2 // five
      ]
    ]);
    xy.push([
      [x1,
      y1],
      [x1,
      y2],
      [x1,
      y3],
      [x3,
      y1],
      [x3,
      y2],
      [
        x3,
        y3 // six
      ]
    ]);
    d = 0.2 * S;
    sw = 0.05 * S;
    strokeWeight(sw);
    ref = this.attributes;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      attr = ref[i];
      fill({
        J: 'white',
        S: 'yellow',
        T: 'pink'
      }[attr[0]]);
      stroke({
        K: 'red',
        D: 'green',
        N: 'blue'
      }[attr[1]]);
      [x, y] = xy[antal][i];
      // console.log @i+1,attr,x,y
      circle(x, y, d);
    }
    return pop();
  }

};

filterData = (items, month, attr) => {
  return _.filter(items, (item) => {
    return item.d.includes(month) && item.a.includes(attr);
  });
};

attributes = (items, date) => {
  var res;
  res = _.filter(items, (item) => {
    return item.d.includes(date) && (age === "" || item.a[0] === age[0]) && (geo === "" || item.a[1] === geo[0]);
  });
  res = _.map(res, (item) => {
    return item.a;
  });
  return res.sort().reverse();
};

Kalender = class Kalender {
  constructor(items1) {
    this.filtrera = this.filtrera.bind(this);
    this.draw = this.draw.bind(this);
    this.mousePressed = this.mousePressed.bind(this);
    this.items = items1;
    this.mx = 3 * S / 2;
    this.my = 3 * S / 2;
    this.date = new Date(month + '-01');
    this.month = this.date.getMonth();
    this.tmonth = MONTHS[this.month];
    this.filtrera();
  }

  filtrera() {
    var i, items, j, len, ref, results, x, y;
    items = filterData(this.items, month, "");
    this.offset = modulo(this.date.getDay() - 1, 7);
    this.days = [];
    ref = range(daysInMonth(this.date.getFullYear(), this.date.getMonth() + 1));
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (this.offset + i >= 0) {
        x = this.mx + S * (modulo(this.offset + i, 7));
        y = this.my + S * floor((this.offset + i) / 7);
        results.push(this.days.push(new Day(i + 1, i, x, y, attributes(items, month + "-" + ("0" + (i + 1)).slice(-2)))));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  draw() {
    var button, day, i, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, results;
    fill("black");
    textSize(0.3 * S);
    ref = range(N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text("Må Ti On To Fr Lö Sö".split(' ')[i], kalender.mx + S * i, 0.77 * S);
    }
    textSize(0.3 * S);
    ref1 = range(6);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      i = ref1[k];
      text("v" + "15 16 17 18 19 20 21 22".split(' ')[i], S / 2, kalender.my + S * i);
    }
    text(pretty(month), S * 4.5, 0.3 * S);
    ref2 = this.days;
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      day = ref2[l];
      day.draw();
    }
    ref3 = this.buttons;
    results = [];
    for (m = 0, len3 = ref3.length; m < len3; m++) {
      button = ref3[m];
      results.push(button.draw());
    }
    return results;
  }

  mousePressed(x, y) {
    var button, day, j, k, len, len1, ref, ref1, results;
    ref = this.days;
    for (j = 0, len = ref.length; j < len; j++) {
      day = ref[j];
      if (day.inside(day.i)) {
        day.click();
      }
    }
    ref1 = this.buttons;
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      button = ref1[k];
      if (button.inside()) {
        results.push(button.click(button));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

window.onresize = function() {
  return resize();
};

resize = function() {
  var day, h, j, len, ref, w;
  resizeCanvas(innerWidth, innerWidth * 0.85);
  S = width / 8.5;
  kalender.mx = 3 * S / 2;
  kalender.my = 3 * S / 2;
  ref = kalender.days;
  for (j = 0, len = ref.length; j < len; j++) {
    day = ref[j];
    day.x = kalender.mx + S * c(day.i + kalender.offset);
    day.y = kalender.my + S * r(day.i + kalender.offset);
  }
  kalender.buttons = [];
  w = 0.11 * width;
  h = 0.06 * height;
  kalender.buttons.push(new Button("Förra", 18, 4, w, h, 'white', () => {
    return monthClick(-1);
  }));
  kalender.buttons.push(new Button("Nästa", 88, 4, w, h, 'white', () => {
    return monthClick(+1);
  }));
  w = 0.16 * width;
  h = 0.06 * height;
  kalender.buttons.push(new Button("Senior", 45, 88, w, h, 'yellow', ageClick));
  kalender.buttons.push(new Button("Junior", 65, 88, w, h, 'white', ageClick));
  kalender.buttons.push(new Button("Tjej", 85, 88, w, h, 'pink', ageClick));
  kalender.buttons.push(new Button("Klubb", 45, 95, w, h, 'red', geoClick));
  kalender.buttons.push(new Button("Distrikt", 65, 95, w, h, 'green', geoClick));
  return kalender.buttons.push(new Button("Nation", 85, 95, w, h, 'blue', geoClick));
};

// H = min(innerHeight//11,innerWidth//10)
// W = H
// S = W
// mx = (innerWidth - 8*S)/2
// my = S/2
window.mousePressed = () => {
  return kalender.mousePressed(mouseX, mouseY);
};

window.preload = () => {
  return data = loadJSON("kalender.json");
};

window.setup = () => {
  //noLoop()
  createCanvas(425, 375);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  data = data.events;
  kalender = new Kalender(data);
  resize();
  return draw();
};

window.draw = function() {
  background('lightgray');
  return kalender.draw();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-023-Wasa-Search\coffee\kalender.coffee